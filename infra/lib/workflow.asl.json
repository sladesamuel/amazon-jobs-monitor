{
  "Comment": "Orchestrates the process of monitoring the Amazon Jobs website for updates",
  "StartAt": "Fetch page count",
  "States": {
    "Fetch page count": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${FetchPageContentLambdaArn}",
        "Payload": {
          "pageNumber": 1,
          "searchTerm.$": "$.searchTerm",
          "includeJobs": false
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "For each page"
    },
    "For each page": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Collect results",
        "States": {
          "Collect results": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "FunctionName": "${FetchPageContentLambdaArn}",
              "Payload": {
                "pageNumber.$": "$.pageNumber",
                "searchTerm.$": "$$.Execution.Input.searchTerm",
                "includeJobs": true
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Next": "Filter results",
      "ItemsPath": "$.pages",
      "ResultSelector": {
        "jobs.$": "$[*].jobs[*]"
      }
    },
    "Filter results": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${FilterResultsLambdaArn}",
        "Payload.$": "$.jobs"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "OutputPath": "$.Payload",
      "Next": "Check jobs"
    },
    "Check jobs": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get job",
        "States": {
          "Get job": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${JobsTableName}",
              "Key": {
                "id": {
                  "S.$": "$.id"
                }
              }
            },
            "ResultPath": "$.Result",
            "Next": "Is job already tracked?"
          },
          "Is job already tracked?": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.Result.Item",
                "IsPresent": true,
                "Next": "Return empty result"
              }
            ],
            "Default": "Track job"
          },
          "Track job": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
              "TableName": "${JobsTableName}",
              "Item": {
                "id": {
                  "S.$": "$.id"
                },
                "title": {
                  "S.$": "$.title"
                },
                "jobPath": {
                  "S.$": "$.job_path"
                },
                "applyUrl": {
                  "S.$": "$.url_next_step"
                },
                "postedDate": {
                  "S.$": "$.posted_date"
                }
              }
            },
            "ResultPath": "$.Result",
            "Next": "Capture new job"
          },
          "Capture new job": {
            "Type": "Pass",
            "Parameters": {
              "Item": {
                "title.$": "$.title",
                "applyUrl.$": "$.url_next_step",
                "postedDate.$": "$.posted_date"
              }
            },
            "End": true
          },
          "Return empty result": {
            "Type": "Pass",
            "Parameters": null,
            "End": true
          }
        }
      },
      "ResultSelector": {
        "results.$": "$[*].Item"
      },
      "Next": "Count results"
    },
    "Count results": {
      "Type": "Pass",
      "Parameters": {
        "results.$": "$.results",
        "count.$": "States.ArrayLength($.results)"
      },
      "Next": "Has new results?"
    },
    "Has new results?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.count",
          "NumericGreaterThan": 0,
          "Next": "Send new results notification"
        }
      ],
      "Default": "Send no new results notification"
    },
    "Send no new results notification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${JobNotificationsArn}",
        "Subject": "Amazon Jobs Monitor",
        "Message": "No new jobs today"
      },
      "End": true
    },
    "Send new results notification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${JobNotificationsArn}",
        "Subject": "Amazon Jobs Monitor",
        "Message.$": "$"
      },
      "End": true
    }
  }
}